# ðŸ“Œ Gerekli KÃ¼tÃ¼phaneleri YÃ¼kleme
!pip install numpy pandas torch torchvision tensorflow optuna scikit-learn joblib google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client requests geopy stable-baselines3 ccxt websockets ta textblob vaderSentiment web3

import os
import logging
import time
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
import torch.optim as optim
import threading
import requests
import asyncio
import websockets
import ccxt
import ta
from textblob import TextBlob
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
from web3 import Web3
from dotenv import load_dotenv
from binance.client import Client as BinanceClient
from kucoin.client import Trade, Market
from okx import MarketData, Trade
from google.colab import auth
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from stable_baselines3 import PPO
import gym
import telebot

# ðŸ“Œ Google Drive API Kimlik DoÄŸrulama
auth.authenticate_user()
drive_service = build('drive', 'v3')

# ðŸ“Œ API AnahtarlarÄ±nÄ± YÃ¼kleme
load_dotenv()

API_KEYS = {
    "alchemy": {
        "polygon": os.getenv("ALCHEMY_POLYGON_API_KEY"),
        "arbitrum": os.getenv("ALCHEMY_ARBITRUM_API_KEY"),
        "ethereum": os.getenv("ALCHEMY_ETH_API_KEY")
    },
    "infura": os.getenv("INFURA_API_KEY"),
    "the_graph": os.getenv("THE_GRAPH_API_KEY"),
    "coinglass": os.getenv("COINGLASS_API_KEY"),
    "bscscan": os.getenv("BSCSCAN_API_KEY"),
    "cryptoquant": os.getenv("CRYPTOQUANT_API_KEY"),
    "coinmarketcap": os.getenv("COINMARKETCAP_API_KEY"),
    "etherscan": os.getenv("ETHERSCAN_API_KEY"),
    "santiment": os.getenv("SANTIMENT_API_KEY"),
    "binance": {
        "key": os.getenv("BINANCE_API_KEY"),
        "secret": os.getenv("BINANCE_API_SECRET")
    },
    "kucoin": {
        "key": os.getenv("KUCOIN_API_KEY"),
        "secret": os.getenv("KUCOIN_API_SECRET"),
        "passphrase": os.getenv("KUCOIN_API_PASSPHRASE")
    },
    "okx": {
        "key": os.getenv("OKX_API_KEY"),
        "secret": os.getenv("OKX_API_SECRET"),
        "passphrase": os.getenv("OKX_API_PASSPHRASE")
    },
    "telegram": {
        "token": os.getenv("TELEGRAM_BOT_TOKEN"),
        "chat_id": os.getenv("TELEGRAM_CHAT_ID")
    }
}

# ðŸ“Œ Binance, OKX, KuCoin BaÄŸlantÄ±larÄ±
binance = BinanceClient(API_KEYS["binance"]["key"], API_KEYS["binance"]["secret"])
kucoin_trade = Trade(API_KEYS["kucoin"]["key"], API_KEYS["kucoin"]["secret"], API_KEYS["kucoin"]["passphrase"])
okx_headers = {
    "OK-ACCESS-KEY": API_KEYS["okx"]["key"],
    "OK-ACCESS-SIGN": API_KEYS["okx"]["secret"],
    "OK-ACCESS-PASSPHRASE": API_KEYS["okx"]["passphrase"],
    "Content-Type": "application/json",
}

# ðŸ“Œ WebSocket BaÄŸlantÄ±larÄ±
async def binance_websocket():
    uri = "wss://stream.binance.com:9443/ws/btcusdt@trade"
    async with websockets.connect(uri) as websocket:
        while True:
            data = await websocket.recv()
            logging.info(f"Binance WebSocket Veri: {data}")

async def okx_websocket():
    uri = "wss://ws.okx.com:8443/ws/v5/public"
    async with websockets.connect(uri) as websocket:
        while True:
            data = await websocket.recv()
            logging.info(f"OKX WebSocket Veri: {data}")

async def kucoin_websocket():
    uri = "wss://ws-api.kucoin.com/endpoint"
    async with websockets.connect(uri) as websocket:
        while True:
            data = await websocket.recv()
            logging.info(f"KuCoin WebSocket Veri: {data}")

# ðŸ“Œ On-Chain Verileri Kullanarak AI Karar MekanizmasÄ±
def get_onchain_data():
    url = f"https://api.alchemy.com/v2/{API_KEYS['alchemy']['ethereum']}"
    response = requests.get(url).json()
    return response

# ðŸ“Œ AI Destekli Duygu Analizi
def sentiment_analysis(text):
    analyzer = SentimentIntensityAnalyzer()
    sentiment_score = analyzer.polarity_scores(text)["compound"]
    return sentiment_score

# ðŸ“Œ AI Destekli KaldÄ±raÃ§ YÃ¶netimi (1x - 20x)
def determine_leverage(risk_level):
    if risk_level < 0.3:
        return np.random.randint(1, 5)
    elif 0.3 <= risk_level < 0.7:
        return np.random.randint(5, 15)
    else:
        return np.random.randint(15, 20)

# ðŸ“Œ AI Destekli AlÄ±m SatÄ±m
def open_futures_positions():
    symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]
    
    for symbol in symbols:
        price = float(binance.get_symbol_ticker(symbol=symbol)["price"])
        leverage = determine_leverage(price / 100000)

        binance.futures_create_order(symbol=symbol, side="BUY", type="MARKET", quantity=0.01, leverage=leverage)
        kucoin_trade.create_market_order(symbol, "buy", size=0.01)
        requests.post("https://www.okx.com/api/v5/trade/order", headers=okx_headers, json={
            "instId": symbol, "tdMode": "cross", "side": "buy", "ordType": "market", "sz": "0.01"
        })

# ðŸ“Œ Telegram Botu ile Kontrol
bot = telebot.TeleBot(API_KEYS["telegram"]["token"])

@bot.message_handler(commands=['status'])
def send_pnl_status(message):
    bot.send_message(message.chat.id, "ðŸ“Š GÃ¼ncel PnL bilgisi yakÄ±nda eklenecek.")

@bot.message_handler(commands=['open_trade'])
def manual_trade(message):
    bot.send_message(message.chat.id, "ðŸ“ˆ Manuel iÅŸlem aÃ§Ä±lÄ±yor...")
    open_futures_positions()

@bot.message_handler(commands=['start'])
def start_bot(message):
    bot.send_message(message.chat.id, "Bot Ã§alÄ±ÅŸmaya baÅŸladÄ±!")
    asyncio.run(open_futures_positions())

@bot.message_handler(commands=['stop'])
def stop_bot(message):
    bot.send_message(message.chat.id, "Bot durduruldu!")
    os._exit(0)

# ðŸ“Œ Ana Ã‡alÄ±ÅŸtÄ±rma
if __name__ == "__main__":
    bot.polling(none_stop=True)
