import os
import sys
import io
import logging
import time
import numpy as np
import pandas as pd
import requests
import hmac
import hashlib
import base64
import torch
import lightgbm as lgb
import asyncio
import nest_asyncio
from dotenv import load_dotenv
from binance.client import Client as BinanceClient
from kucoin.client import Trade, Market
from okx import MarketData, Trade
from web3 import Web3
from stable_baselines3 import PPO
import gym
from sklearn.preprocessing import MinMaxScaler
import telebot

# âœ… Google Colab iÃ§in event loop dÃ¼zeltmesi
nest_asyncio.apply()

# âœ… Ã‡Ä±kÄ±ÅŸlarÄ± UTF-8 formatÄ±na getir
os.environ["PYTHONIOENCODING"] = "utf-8"
sys.stdout = io.StringIO()
sys.stderr = io.StringIO()

# ðŸ“Œ **API AnahtarlarÄ±nÄ± YÃ¼kle**
load_dotenv()

API_KEYS = {
    "binance": {
        "key": os.getenv("BINANCE_API_KEY"),
        "secret": os.getenv("BINANCE_API_SECRET")
    },
    "kucoin": {
        "key": os.getenv("KUCOIN_API_KEY"),
        "secret": os.getenv("KUCOIN_API_SECRET"),
        "passphrase": os.getenv("KUCOIN_API_PASSPHRASE")
    },
    "okx": {
        "key": os.getenv("OKX_API_KEY"),
        "secret": os.getenv("OKX_API_SECRET"),
        "passphrase": os.getenv("OKX_API_PASSPHRASE")
    },
    "telegram": {
        "token": os.getenv("TELEGRAM_BOT_TOKEN"),
        "chat_id": os.getenv("TELEGRAM_CHAT_ID")
    }
}

# âœ… **Borsa BaÄŸlantÄ±larÄ±**
clients = {}

try:
    # âœ… Binance API BaÄŸlantÄ±sÄ±
    clients["binance"] = BinanceClient(API_KEYS["binance"]["key"], API_KEYS["binance"]["secret"])

    # âœ… KuCoin API BaÄŸlantÄ±sÄ±
    clients["kucoin_trade"] = Trade(
        key=API_KEYS["kucoin"]["key"],
        secret=API_KEYS["kucoin"]["secret"],
        passphrase=API_KEYS["kucoin"]["passphrase"]
    )
    clients["kucoin_market"] = Market()

except Exception as e:
    logging.error(f"API BaÄŸlantÄ± HatasÄ±: {str(e)}")

# âœ… **OKX API BaÄŸlantÄ±sÄ±**
OKX_API_URL = "https://www.okx.com"

# ðŸ“Œ **OKX API iÃ§in imzalama fonksiyonu**
def sign_request(method, endpoint, body=""):
    """OKX API iÃ§in HMAC-SHA256 imzalama iÅŸlemi"""
    timestamp = str(time.time())

    message = timestamp + method + endpoint + body
    signature = base64.b64encode(
        hmac.new(
            API_KEYS["okx"]["secret"].encode("utf-8"),
            message.encode("utf-8"),
            hashlib.sha256,
        ).digest()
    ).decode()

    headers = {
        "OK-ACCESS-KEY": API_KEYS["okx"]["key"],
        "OK-ACCESS-SIGN": signature,
        "OK-ACCESS-TIMESTAMP": timestamp,
        "OK-ACCESS-PASSPHRASE": API_KEYS["okx"]["passphrase"],
        "Content-Type": "application/json",
    }
    return headers

# ðŸ“Œ **Telegram Bildirimi**
def send_telegram_alert(message):
    url = f"https://api.telegram.org/bot{API_KEYS['telegram']['token']}/sendMessage"
    data = {"chat_id": API_KEYS["telegram"]["chat_id"], "text": message}
    requests.post(url, data=data)

# ðŸ“Œ **Order Book Analizi (Binance, KuCoin, OKX)**
def analyze_order_book(symbol="BTCUSDT", exchange="binance"):
    """ Binance, KuCoin ve OKX borsalarÄ± iÃ§in Order Book analizi. """
    try:
        if exchange == "binance":
            order_book = clients["binance"].get_order_book(symbol=symbol, limit=100)
        elif exchange == "kucoin":
            order_book = clients["kucoin_market"].get_order_book(symbol, limit=20)
        elif exchange == "okx":
            headers = sign_request("GET", f"/api/v5/market/books?instId={symbol}")
            response = requests.get(f"{OKX_API_URL}/api/v5/market/books?instId={symbol}", headers=headers)
            order_book = response.json()

        bid_volumes = np.array([float(order[1]) for order in order_book["bids"]])
        ask_volumes = np.array([float(order[1]) for order in order_book["asks"]])
        return (bid_volumes.sum() - ask_volumes.sum()) / (bid_volumes.sum() + ask_volumes.sum())
    
    except Exception as e:
        logging.error(f"Order Book HatasÄ±: {str(e)}")
        return 0

# ðŸ“Œ **Trade KararÄ±**
def determine_trade(symbol):
    """ Order book analizine ve piyasa verilerine gÃ¶re trade sinyali Ã¼ret. """
    order_book_imbalance = analyze_order_book(symbol)
    if order_book_imbalance > 0.2:
        return "BUY"
    elif order_book_imbalance < -0.2:
        return "SELL"
    return "HOLD"

# ðŸ“Œ **Trade BÃ¼yÃ¼klÃ¼ÄŸÃ¼nÃ¼ Dinamik Hesaplama**
def dynamic_trade_size(balance, volatility):
    """ Piyasa volatilitesine gÃ¶re iÅŸlem bÃ¼yÃ¼klÃ¼ÄŸÃ¼nÃ¼ ayarla. """
    risk_factor = 0.02
    return balance * risk_factor * (1 + volatility)

# ðŸ“Œ **KuCoin ve OKXâ€™de Ä°ÅŸlem AÃ§ma**
def execute_trade(symbol, side, quantity, exchange):
    """ OKX ve KuCoin borsalarÄ±nda iÅŸlem aÃ§ma fonksiyonu. """
    try:
        if exchange == "kucoin":
            clients["kucoin_trade"].create_market_order(symbol, side, size=quantity)
        elif exchange == "okx":
            headers = sign_request("POST", "/api/v5/trade/order")
            data = {"instId": symbol, "tdMode": "cross", "side": side, "ordType": "market", "sz": str(quantity)}
            requests.post(f"{OKX_API_URL}/api/v5/trade/order", json=data, headers=headers)
    
    except Exception as e:
        logging.error(f"Ä°ÅŸlem AÃ§ma HatasÄ±: {str(e)}")

# ðŸ“Œ **Ana Ã‡alÄ±ÅŸtÄ±rma (Google Colab Uyumlu)**
async def main():
    logging.basicConfig(level=logging.INFO)
    max_trades = 8
    trade_count = 0

    while trade_count < max_trades:
        for symbol in ["BTCUSDT", "ETHUSDT", "SOLUSDT", "XRPUSDT"]:
            trade_signal = determine_trade(symbol)
            balance = 1000
            volatility = np.random.uniform(0.01, 0.05)
            position_size = dynamic_trade_size(balance, volatility)

            if trade_signal == "BUY":
                execute_trade(symbol, "buy", position_size, "kucoin")
                execute_trade(symbol, "buy", position_size, "okx")
                send_telegram_alert(f"ðŸš€ {symbol} iÃ§in ALIM iÅŸlemi gerÃ§ekleÅŸti!")

            elif trade_signal == "SELL":
                execute_trade(symbol, "sell", position_size, "kucoin")
                execute_trade(symbol, "sell", position_size, "okx")
                send_telegram_alert(f"ðŸ“‰ {symbol} iÃ§in SATIÅž iÅŸlemi gerÃ§ekleÅŸti!")

            trade_count += 1
            if trade_count >= max_trades:
                break

        await asyncio.sleep(10)

# âœ… Google Colab Uyumlu Ã‡alÄ±ÅŸtÄ±r
loop = asyncio.get_running_loop()
task = loop.create_task(main())
